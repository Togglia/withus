name: Dockerizing to Amazon ECR

on:
  push:
    branches:
      - main
    paths:
      - '**/VERSION'

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    strategy:
      matrix:
        dockerfile-path:
          - 'Dockerfile/web/intro/VERSION'
          - 'Dockerfile/web/home/VERSION'
          - 'Dockerfile/web/login/VERSION'
          - 'Dockerfile/web/join/VERSION'
          - 'Dockerfile/was/intro/VERSION'
          - 'Dockerfile/was/home/VERSION'
          - 'Dockerfile/was/login/VERSION'
          - 'Dockerfile/was/join/VERSION'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2 # or use ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get version from VERSION file
        id: get-version
        run: |
          VERSION=$(cat ${{ matrix.dockerfile-path }})
          echo "::set-output name=version::$VERSION"

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ matrix.dockerfile-path | split("/") | last | split(".")[0] }} 
          IMAGE_TAG: ${{ steps.get-version.outputs.version }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ${{ matrix.dockerfile-path }}/Dockerfile ${{ matrix.dockerfile-path | dirname }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
