name: Dockerizing to Amazon ECR

on:
  push:       
    branches:
      - main
    paths:
      - 'Dockerfile/web/intro/VERSION'
      - 'Dockerfile/web/home/VERSION'
      - 'Dockerfile/web/login/VERSION'
      - 'Dockerfile/web/join/VERSION'
      - 'Dockerfile/was/intro/VERSION'
      - 'Dockerfile/was/home/VERSION'
      - 'Dockerfile/was/login/VERSION'
      - 'Dockerfile/was/join/VERSION'

env:
  AWS_REGION: ap-northeast-2        

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}          
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Get version from web/intro/VERSION file
      id: get-version-web-intro
      if: ${{ github.event.head_commit.message != 'skip' && github.event.commits.*.added && contains(github.event.commits.*.added, 'Dockerfile/web/intro/VERSION') || github.event.commits.*.modified && contains(github.event.commits.*.modified, 'Dockerfile/web/intro/VERSION') }}
      run: |
        VERSION=$(cat Dockerfile/web/intro/VERSION)
        echo "::set-output name=version::$VERSION"

    - name: Build, tag, and push web/intro image
      if: steps.get-version-web-intro.outputs.version
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: web-intro
        IMAGE_TAG: ${{ steps.get-version-web-intro.outputs.version }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile/web/intro/Dockerfile Dockerfile/web/intro
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Get version from web/home/VERSION file
      id: get-version-web-home
      if: ${{ github.event.head_commit.message != 'skip' && github.event.commits.*.added && contains(github.event.commits.*.added, 'Dockerfile/web/home/VERSION') || github.event.commits.*.modified && contains(github.event.commits.*.modified, 'Dockerfile/web/home/VERSION') }}
      run: |
        VERSION=$(cat Dockerfile/web/home/VERSION)
        echo "::set-output name=version::$VERSION"

    - name: Build, tag, and push web/home image
      if: steps.get-version-web-home.outputs.version
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: web-home
        IMAGE_TAG: ${{ steps.get-version-web-home.outputs.version }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile/web/home/Dockerfile Dockerfile/web/home
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Get version from web/login/VERSION file
      id: get-version-web-login
      if: ${{ github.event.head_commit.message != 'skip' && github.event.commits.*.added && contains(github.event.commits.*.added, 'Dockerfile/web/login/VERSION') || github.event.commits.*.modified && contains(github.event.commits.*.modified, 'Dockerfile/web/login/VERSION') }}
      run: |
        VERSION=$(cat Dockerfile/web/login/VERSION)
        echo "::set-output name=version::$VERSION"

    - name: Build, tag, and push web/login image
      if: steps.get-version-web-login.outputs.version
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: web-login
        IMAGE_TAG: ${{ steps.get-version-web-login.outputs.version }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile/web/login/Dockerfile Dockerfile/web/login
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Get version from web/join/VERSION file
      id: get-version-web-join
      if: ${{ github.event.head_commit.message != 'skip' && github.event.commits.*.added && contains(github.event.commits.*.added, 'Dockerfile/web/join/VERSION') || github.event.commits.*.modified && contains(github.event.commits.*.modified, 'Dockerfile/web/join/VERSION') }}
      run: |
        VERSION=$(cat Dockerfile/web/join/VERSION)
        echo "::set-output name=version::$VERSION"

    - name: Build, tag, and push web/join image
      if: steps.get-version-web-join.outputs.version
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: web-join
        IMAGE_TAG: ${{ steps.get-version-web-join.outputs.version }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile/web/join/Dockerfile Dockerfile/web/join
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Get version from was/intro/VERSION file
      id: get-version-was-intro
      if: ${{ github.event.head_commit.message != 'skip' && github.event.commits.*.added && contains(github.event.commits.*.added, 'Dockerfile/was/intro/VERSION') || github.event.commits.*.modified && contains(github.event.commits.*.modified, 'Dockerfile/was/intro/VERSION') }}
      run: |
        VERSION=$(cat Dockerfile/was/intro/VERSION)
        echo "::set-output name=version::$VERSION"

    - name: Build, tag, and push was/intro image
      if: steps.get-version-was-intro.outputs.version
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: was-intro
        IMAGE_TAG: ${{ steps.get-version-was-intro.outputs.version }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile/was/intro/Dockerfile Dockerfile/was/intro
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Get version from was/home/VERSION file
      id: get-version-was-home
      if: ${{ github.event.head_commit.message != 'skip' && github.event.commits.*.added && contains(github.event.commits.*.added, 'Dockerfile/was/home/VERSION') || github.event.commits.*.modified && contains(github.event.commits.*.modified, 'Dockerfile/was/home/VERSION') }}
      run: |
        VERSION=$(cat Dockerfile/was/home/VERSION)
        echo "::set-output name=version::$VERSION"

    - name: Build, tag, and push was/home image
      if: steps.get-version-was-home.outputs.version
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: was-home
        IMAGE_TAG: ${{ steps.get-version-was-home.outputs.version }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile/was/home/Dockerfile Dockerfile/was/home
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Get version from was/login/VERSION file
      id: get-version-was-login
      if: ${{ github.event.head_commit.message != 'skip' && github.event.commits.*.added && contains(github.event.commits.*.added, 'Dockerfile/was/login/VERSION') || github.event.commits.*.modified && contains(github.event.commits.*.modified, 'Dockerfile/was/login/VERSION') }}
      run: |
        VERSION=$(cat Dockerfile/was/login/VERSION)
        echo "::set-output name=version::$VERSION"

    - name: Build, tag, and push was/login image
      if: steps.get-version-was-login.outputs.version
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: was-login
        IMAGE_TAG: ${{ steps.get-version-was-login.outputs.version }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile/was/login/Dockerfile Dockerfile/was/login
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Get version from was/join/VERSION file
      id: get-version-was-join
      if: ${{ github.event.head_commit.message != 'skip' && github.event.commits.*.added && contains(github.event.commits.*.added, 'Dockerfile/was/join/VERSION') || github.event.commits.*.modified && contains(github.event.commits.*.modified, 'Dockerfile/was/join/VERSION') }}
      run: |
        VERSION=$(cat Dockerfile/was/join/VERSION)
        echo "::set-output name=version::$VERSION"

    - name: Build, tag, and push was/join image
      if: steps.get-version-was-join.outputs.version
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: was-join
        IMAGE_TAG: ${{ steps.get-version-was-join.outputs.version }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile/was/join/Dockerfile Dockerfile/was/join
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
